import React, { useState } from "react";
import styled from "styled-components";
import { fadeIn } from "react-animations";

const Container = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
`;

const ImageContainer = styled.div`
  animation: 1s ${fadeIn};
  margin-top: 20px;
`;

const Image = styled.img`
  max-width: 100%;
`;

const PromptForm = styled.form`
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 20px;
`;

const Input = styled.input`
  padding: 10px;
  font-size: 1rem;
  margin-right: 10px;
  border: none;
  border-radius: 5px;
`;

const Button = styled.button`
  padding: 10px;
  font-size: 1rem;
  border: none;
  border-radius: 5px;
  background-color: #4caf50;
  color: white;
  cursor: pointer;
`;

const API_KEY = "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";

const Visualize = () => {
  const [prompt, setPrompt] = useState("");
  const [imageUrl, setImageUrl] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch(
        "https://api.openai.com/v1/images/generations",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${API_KEY}`,
          },
          body: JSON.stringify({
            model: "image-alpha-001",
            prompt: prompt,
            num_images: 1,
          }),
        }
      );
      const data = await response.json();
      setImageUrl(data.data[0].url);
    } catch (error) {
      console.error(error);
    }
  };

  const handlePromptChange = (e) => {
    setPrompt(e.target.value);
  };

  return (
    <Container>
      <PromptForm onSubmit={handleSubmit}>
        <label className="text-2xl font-bold mb-10" htmlFor="prompt">Enter your dream room with your colors:</label>
        <Input
          type="text"
          name="prompt"
          id="prompt"
          value={prompt}
          onChange={handlePromptChange}
        />
        <Button className="m-2" type="submit">Generate Image</Button>
      </PromptForm>
      {imageUrl && (
        <ImageContainer>
          <Image className="rounded-lg shadow-lg m-10 h-96" src={imageUrl} alt="Generated by OpenAI" />
        </ImageContainer>
      )}
    </Container>
  );
};

export default Visualize;
